@page "/products"
@using System.Text.Json
@inject HttpClient Http
@using MudBlazor


<PageTitle>Products</PageTitle>
<MudContainer>
    <MudText Typo="Typo.h4">Products</MudText>

    <MudTable Items="@products" Hover="true">
        <HeaderContent>
            <MudTh>Barcode</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Image</MudTh>
            <MudTh>Stock</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.ProductBarcode</MudTd>
            <MudTd>@context.ProductName</MudTd>
            <MudTd>@context.Price</MudTd>
            <MudTd>@context.ImagePath</MudTd>
            <MudTd>@context.Stock</MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<ProductModel> products = new List<ProductModel>();
    private bool getProductsError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    // This method will run on page initialization
    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:8080/api/products");
        request.Headers.Add("Accept", "application/json");

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            // Debug: Log the raw response content
            var rawContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Raw Response Content: " + rawContent);  // Log the raw JSON response

            using var responseStream = await response.Content.ReadAsStreamAsync();
            var apiResponse = await JsonSerializer.DeserializeAsync<ApiResponse>(
                responseStream,
                new JsonSerializerOptions
                {
                    PropertyNamingPolicy = new SnakeCaseNamingPolicy() // Using the custom SnakeCaseNamingPolicy
                }
            );

            if (apiResponse?.Data != null)
            {
                Console.WriteLine($"Fetched {apiResponse.Data.Count} products.");

                // Debugging each product in Data
                foreach (var product in apiResponse.Data)
                {
                    Console.WriteLine($"Product Barcode: {product.ProductBarcode}");
                    Console.WriteLine($"Product Name: {product.ProductName}");
                    Console.WriteLine($"Price: {product.Price}");
                    Console.WriteLine($"Stock Quantity: {product.Stock?.Quantity}");
                }

                products = apiResponse.Data.Select(p => new ProductModel
                {
                    ProductBarcode = p.ProductBarcode ?? string.Empty,
                    ProductName = p.ProductName ?? string.Empty,
                    ImagePath = p.ImagePath ?? string.Empty,
                    Price = p.Price,
                    Stock = p.Stock?.Quantity ?? 0
                }).ToList();
            }
        }
        else
        {
            getProductsError = true;
        }

        shouldRender = true;
    }

    public class ProductModel
    {
        public string ProductBarcode { get; set; } = string.Empty;
        public string ProductName { get; set; } = string.Empty;
        public string ImagePath { get; set; } = string.Empty;
        public uint Price { get; set; }
        public int Stock { get; set; }
    }

    public class ApiResponse
    {
        public string? Status { get; set; }
        public List<ApiProduct>? Data { get; set; }
    }

    public class ApiProduct
    {
        public int ID { get; set; }
        public string? ProductBarcode { get; set; }
        public string? ProductName { get; set; }
        public string? ImagePath { get; set; }
        public uint Price { get; set; }
        public Stock? Stock { get; set; }
    }

    public class Stock
    {
        public int Quantity { get; set; }
    }

    // Custom SnakeCase naming policy
    public class SnakeCaseNamingPolicy : JsonNamingPolicy
    {
        public override string ConvertName(string name)
        {
            var snakeCaseName = System.Text.RegularExpressions.Regex.Replace(
                name,
                "([a-z0-9])([A-Z])",
                "$1_$2"
            ).ToLower();

            return snakeCaseName;
        }
    }
}
