@page "/products"
@using System.Text.Json
@inject HttpClient Http
@using MudBlazor
@using System.Text.Json.Serialization;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using MudBlazor.Examples.Data.Models

<PageTitle>Products</PageTitle>
<MudContainer Class="mt-5">
    <div class="d-flex justify-between align-items-center gap-2">
        <MudText Typo="Typo.h4">Products</MudText>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" />
    </div>

    <MudTable Items="@products" Hover="true">
        <HeaderContent>
            <MudTh>Barcode</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Image</MudTh>
            <MudTh>Stock</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.ProductBarcode</MudTd>
            <MudTd>@context.ProductName</MudTd>
            <MudTd>@context.Price.ToString("C")</MudTd>
            <MudTd>
                <MudTooltip Text="@context.ProductName">
                    <MudImage
                        Src="@($"http://127.0.0.1:8080/{context.ImagePath}")"
                        Alt="@context.ProductName"
                        Elevation="25"
                        Width="75"
                        Class="rounded-lg"
                        FallbackSrc="images/mony.jpg"
                    />
                </MudTooltip>
            </MudTd>
            <MudTd>@context.Stock</MudTd>
            <MudTd Width="200">
                <MudFab Class="" Color="Color.Primary" @onclick="() => UpdateProductAsync(context)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" />
                <MudFab Color="Color.Secondary" @onclick="() => DeleteProductAsync(context)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<ProductModel> products = new List<ProductModel>();
    private bool getProductsError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    // This method will run on page initialization
    protected override async Task OnInitializedAsync()
    {
        await FetchProductDataAsync();
        shouldRender = true;
    }

    private async Task FetchProductDataAsync()
    {
        var response = await Http.GetFromJsonAsync<ApiResponse>("products");

        if (response?.Data != null)
        {
            products = response.Data.Select(p => new ProductModel
            {
                ProductID = p.ID,
                ProductBarcode = p.ProductBarcode ?? string.Empty,
                ProductName = p.ProductName ?? string.Empty,
                ImagePath = p.ImagePath ?? string.Empty,
                Price = p.Price,
                Stock = p.Stock?.Quantity ?? 0
            }).ToList();
        }
    }

    public class ApiResponse
    {
        public string? Status { get; set; }
        public List<ApiProduct>? Data { get; set; }
    }

    public class ApiProduct
    {
        public int ID { get; set; }
        [JsonPropertyName("product_barcode")]
        public string? ProductBarcode { get; set; }
        [JsonPropertyName("product_name")]
        public string? ProductName { get; set; }
        [JsonPropertyName("image_path")]
        public string? ImagePath { get; set; }
        [JsonPropertyName("price")]
        public uint Price { get; set; }
        [JsonPropertyName("stock")]
        public Stock? Stock { get; set; }
    }

    public class Stock
    {
        [JsonPropertyName("quantity")]
        public int Quantity { get; set; }
    }
    private async Task DeleteProductAsync(ProductModel product)
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.ContentText, "Do you really want to delete these records?" },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Http.DeleteAsync($"products/{product.ProductID}"); // Modify the endpoint as needed
            await FetchProductDataAsync();
            Snackbar.Add("Delete Product Success", Severity.Success);
        }
        @* return DialogService.ShowAsync<DeleteDialog>("Delete", parameters, options); *@
    }

    private async Task UpdateProductAsync(ProductModel product)
    {
        var parameters = new DialogParameters<UpdateDialog>
        {
            { x => x.Product, product }
        };

        var dialog = await DialogService.ShowAsync<UpdateDialog>("Update Product", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var updatedProduct = (ProductModel)result.Data;
            using var formDataProduct = new MultipartFormDataContent();

            // Add fields as string content
            formDataProduct.Add(new StringContent(updatedProduct.ProductID.ToString()), "ID");
            formDataProduct.Add(new StringContent(updatedProduct.ProductBarcode), "product_barcode");
            formDataProduct.Add(new StringContent(updatedProduct.ProductName), "product_name");
            formDataProduct.Add(new StringContent(updatedProduct.ImagePath), "image_path");
            formDataProduct.Add(new StringContent(updatedProduct.Price.ToString()), "price");

            await Http.PutAsync($"products/{product.ProductID}", formDataProduct);

            using var formDataStock = new MultipartFormDataContent();
            formDataStock.Add(new StringContent(updatedProduct.Stock.ToString()), "quantity");
            await Http.PutAsync($"stocks/{product.ProductID}", formDataStock);

            await FetchProductDataAsync();
            Snackbar.Add("Update Product Success", Severity.Success);
        }
    }

}
