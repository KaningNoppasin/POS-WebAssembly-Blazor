@page "/dashboard"
@using MudBlazor
@using System.Collections.Generic
@using System.Text.Json
@inject HttpClient Http
@using System.Text.Json.Serialization;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using MudBlazor.Examples.Data.Models


<PageTitle>Dashboard</PageTitle>
<MudContainer Class="mt-5">
    <div>
        <MudText Typo="Typo.h4">Dashboard</MudText>
    </div>
    <div class="d-flex flex-column align-center">
        <MudText Typo="Typo.h5">Line</MudText>
        <MudChart ChartType="ChartType.Line" ChartSeries="@_series" XAxisLabels="@_xAxisLabels" Width="1200px" Height="600px" ChartOptions="@_options" />
        <MudText Typo="Typo.h5">Bar</MudText>
        <MudChart ChartType="ChartType.Bar" ChartSeries="@_series" XAxisLabels="@_xAxisLabels" Width="1200px" Height="600px" ChartOptions="@_options" />
    </div>
</MudContainer>

@code {
    private List<BillModel> bills = new List<BillModel>();
    private bool getBillError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    // This method will run on page initialization
    protected override async Task OnInitializedAsync()
    {
        await FetchBillDataAsync();
        shouldRender = true;
    }

    private async Task FetchBillDataAsync()
    {
        var response = await Http.GetFromJsonAsync<ApiResponse>("bills");

        if (response?.Data != null)
        {
            bills = response.Data.Select(p => new BillModel
            {
                BillID = p.ID,
                CustomerID = p.CustomerID,
                TotalAmount = p.TotalAmount,
                UpdatedAt = p.UpdatedAt,
            }).ToList();

            // Process bills to plot total amount over time
            ProcessBillsForPlotting();
        }
    }

    private void ProcessBillsForPlotting()
    {
        var monthlyTotals = new Dictionary<string, double>();

        // Assuming bills are sorted by date (you might need to adjust this based on your data)
        foreach (var bill in bills)
        {
            // For simplicity, let's assume the date is the month of the bill creation (you might need to adjust this)
            // In real scenarios, you would parse the date from your data
            var month = GetMonthFromBill(bill); // Implement GetMonthFromBill to extract the month from your bill data

            if (monthlyTotals.ContainsKey(month))
            {
                monthlyTotals[month] += bill.TotalAmount;
            }
            else
            {
                monthlyTotals[month] = bill.TotalAmount;
            }
        }

        // Update chart series
        UpdateChartSeries(monthlyTotals);
    }

    private string GetMonthFromBill(BillModel bill)
    {
        // Implement logic to extract the month from your bill data
        // For demonstration, let's assume bills are created in the following months
        var month = bill.UpdatedAt.Month;
        var monthNames = new[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
        return monthNames[month - 1];
    }

    private void UpdateChartSeries(Dictionary<string, double> monthlyTotals)
    {
        _series.Clear();
        _xAxisLabels = monthlyTotals.Keys.ToArray();

        var seriesData = monthlyTotals.Values.ToArray();
        _series.Add(new ChartSeries() { Name = "Total Amount", Data = seriesData });
    }

    public class ApiResponse
    {
        public string? Status { get; set; }
        public List<ApiBill>? Data { get; set; }
    }
    public class ApiBill
    {
        public int ID { get; set; }
        [JsonPropertyName("customer_id")]
        public uint CustomerID { get; set; }
        [JsonPropertyName("total_amount")]
        public uint TotalAmount { get; set; }
        [JsonPropertyName("UpdatedAt")]
        public DateTime UpdatedAt { get; set; }
    }
    private List<ChartSeries> _series = new List<ChartSeries>();
    private string[] _xAxisLabels = new string[0];
    private string _width = "650px";
    private string _height = "350px";
    private ChartOptions _options = new ChartOptions();
}
